•	1.5x speed 
•	Turn on subtitles
•	Watch first
•	Watch again but take notes, like summarize or bullet list stuff in the video
•	take a break when timer expires

Module 5 – Lambda, APIs, API Gateway, Containers, Step Functions, Fargate and ECS

https://cgp-oex.wgu.edu/courses/course-v1:WGUx+OEX0032+v01/courseware/04c9f97860cb4a2abb91f13af016e906/9396d5a9a12745669810a6ccffabbf43/2?activate_block_id=block-v1%3AWGUx%2BOEX0032%2Bv01%2Btype%40vertical%2Bblock%405cdc1d7661f544c08441f37f21b8b4da

---------------------------------------------------------------------------------------------------------------
•	"Computing (Containers and Serverless)" (new tab) (1:46)
---------------------------------------------------------------------------------------------------------------
This is just an overview in the pdf restating the topics
---------------------------------------------------------------------------------------------------------------
•	"AWS Lambda" (new tab) (9:24)
---------------------------------------------------------------------------------------------------------------
Lambda is a SaaS product yeah you don’t need to patch (add runtimes etc) it or nothing just throw code at it and pay the bill! – Again “Lambda allows code to run without provisioning (provoking) or managing servers” – provoking was misspelled in M$ word so I kept it
Grr again there are compute options that are VMs and Container services like ECS (ITS IN THE DAMN NAME), however there is a third approach that is called serverless computing (SaaS)
Lambda runs your code in a virtual private cloud (VPC) by default You can also optionally configure AWS Lambda to access resources behind your own VPC. This option allows you to use custom security groups and network access control lists
You choose the amount of memory you want to allocate to your functions. Lambda allocates proportional CPU power, network bandwidth, and disk I/O
Lambda Layers
You can configure your Lambda function to pull in additional code and content in the form of layer. A layer is zip archive containing libraries, custom runtimes or other dependencies. With layers, you can use libraries in your function without needing to include them in your deployment package. 
A function can use up to five layers at a time. The total unzipped size of the function and all layers cannot exceed the unzipped deployment package size limit of 250 MB. Layers let you keep your deployment package small, which makes development easier.
Layers are extracted to the /opt directory in the function runtime environment.
To add layers to a function, developers use the update-function-configuration command.
Maximum memory allocation for a single Lambda function is 3 GB.
The maximum runtime for a Lambda function is 15 minutes.
---------------------------------------------------------------------------------------------------------------
•	"APIs and REST" (new tab) (7:18)
---------------------------------------------------------------------------------------------------------------
APIs make computer software accessible to developers via code.
HTTP status codes:
100s – Informational
200s – Success
300s - Redirection
400s - Client errors
500s - Server errors
HTTP status codes will be included in REST ASPI responses 
Commonly seen HTTP status codes
200 - “200 success” - Indicates success both request was received and accepted by the server 
401 - “401 Unauthorized” - Indicates a client error, Unauthorized, Authentication is required but the provided credentials were not accepted or perhaps no credentials were provided in the request.
403 - “403 Forbidden” - Indicates a client error, Forbidden. The request was properly made, but the server is not allowing the request. 
404 - “404 not found” - Indicates a client error, Not Found. The resource is unavailable or could not be accessed. 
500 -“500 Unspecified” - Indicates an unspecific internal server error. 
503 - “503 unavailable” - Indicates the service is temporarily unavailable 
---------------------------------------------------------------------------------------------------------------
•	"Amazon API Gateway" (new tab) (4:57)
---------------------------------------------------------------------------------------------------------------
API Gateway handles all the tasks that are involved in accepting and processing concurrent API calls at scale. Tasks include traffic management, authorization and access control, monitoring, and API version management.
You can use Amazon API Gateway to build an API.
As your applications evolve and grow, your APIs will proliferate. Because of that, it is important to monitor and manage your APIs.
API interfaces that you develop have a frontend and a backend. The frontend is used by the client applications to make requests. The parts of the API implementation that communicate with the other services is referred to as the backend.
The frontend is encapsulated by method requests and method responses.
The backend is encapsulated by requests and responses that integrate with the other services.
Like most services you pay for only for what you use in this case its calls made to an API and data transferred out.
API Gateway integrates with AWS Lambda so that you can create completely serverless APIs.
When paired with CloudFront it allows you to take advantage of the network of edge locations that provide your users with the lowest latency for API requests and responses.
You can also simultaneously run multiple versions of the same API, which allows you to quickly iterate, test, and release new versions.
IAM can be setup to authorize access to your APIs
If you use OAuth tokens or other authorization mechanisms, Amazon API Gateway can use AWS Lambda to run a Lambda authorizer to help you verify incoming requests.
API gateway works tightly with Lambda so you can create serverless APIs
First, you create REST APIs with Amazon API Gateway. Then, your mobile and web applications can use these APIs to call publicly available AWS services through the code that that you run in AWS Lambda.
Amazon Cognito provides user management and authentication functions to secure the backend API.
---------------------------------------------------------------------------------------------------------------
•	"Containers on AWS" (new tab) (10:18)
---------------------------------------------------------------------------------------------------------------
Containers virtualize an operating system
Containers share a virtualized operating system and run as resource-isolated processes.
Containers hold everything that the software needs to run, such as libraries, system tools, code, and the   runtime.
Containers provide process isolation
Containers are isolated from each other, so you do not have to worry about libraries or dependencies being in sync for each service.
Containers allow you to track versions of your application code and their dependencies.
---------------------------------------------------------------------------------------------------------------
•	"Amazon Fargate and Amazon Elastic Container Service" (new tab) (13:03)
---------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------
•	"Module Wrap-Up" (new tab) (1:46)
---------------------------------------------------------------------------------------------------------------

Complete the Module 5 knowledge check 
•	These AWS services can increase the ease of running and managing Docker containers:
Elastic container services (ECS), Elastic Kubernetes service (EKS) and Fargate
•	AWS Lambda automatically scales to support incoming requests without the need for additional configuration, and it remains fault-tolerant
•	Tasks perform the work (when configured) in a workflow when using AWS Step Functions
•	A customer should select Amazon Elastic Container Registry (Amazon ECR) if they need to store, manage and deploy Docker container images, with considerations for encryption, third party integrations, and High-Availability 
•	AWS Fargate provides a managed service for running containers
•	Trucking company benefits of containers : 
•	Amazon S3 server-side encryption provides encryption for data at rest for Elastic Container registry (ECR)
•	Amazon Elastic Container registry (ECR) uses defined polices with AWS Identify and access management (IAM) to control who has access to container images
•	Amazon Elastic container service for Kubernetes (Amazon EKS) will deploy a cluster’s worker nodes across multiple availability zones so that a single point of failure can be eliminated 
umm whats the difference between Amazon Elastic container service for Kubernetes and Kubernetes services (are these the same thing?)
•	_ _ and _ describes how Kubernetes works? (might take several tries to determine these as the answer is not given)
